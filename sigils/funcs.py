import base64
import json
import urllib.parse


FUNCTION_MAP = {
        "NUM": lambda x: float(x) if "." in x else int(x),
        "UPPER": lambda x: str(x).upper(),
        "LOWER": lambda x: str(x).lower(),
        "TRIM": lambda x: str(x).strip(),
        "STRIP": lambda x: str(x).strip(),
        "SLUG": lambda x: str(x).replace(" ", "-"),
        "ZFILL": lambda x, y: str(x).zfill(y),
        "F": lambda x, *args, **kwargs: x.format(*args, **kwargs),
        "STYLE": lambda x: dict(i.split(":") for i in x.split(";") if i),
        "JOIN": lambda o, s: (s or "").join(str(i) for i in o),
        "SPLIT": lambda x, y: str(x).split(y),
        "OR": lambda x, y: x or y,
        "AND": lambda x, y: x and y,
        "NOT": lambda x: not x,
        "BOOL": lambda x: bool(x),
        "INT": lambda x: int(x),
        "FLOAT": lambda x: float(x),
        "TUPLE": lambda x: tuple(x),
        "LIST": lambda x: list(x),
        "SET": lambda x: set(x),
        "JSON": lambda x: json.dumps(x),
        "B64": lambda x: base64.b64encode(x),
        "B64D": lambda x: base64.b64decode(x),
        "URL": lambda x: urllib.parse.quote(x),
        "URLD": lambda x: urllib.parse.unquote(x),
        "LEN": lambda x: len(x),
        "REV": lambda x: x[::-1],
        "SORT": lambda x: sorted(x),
        "ITEM": lambda x, y: x[y],
        "KEY": lambda x, y: x[y],
        "ATTR": lambda x, y: getattr(x, y),
        "ANY": lambda x: any(x),
        "ALL": lambda x: all(x),
        "NONE": lambda x: not any(x),
        "SUM": lambda x: sum(x),
        "MIN": lambda x: min(x),
        "MAX": lambda x: max(x),
        "AVG": lambda x: sum(x) / len(x),
        "ABS": lambda x: abs(x),
        "ROUND": lambda x, y: round(x, y or 0),
        "CEIL": lambda x: int(x) + 1,
        "FLOOR": lambda x: int(x),
        "TRUNC": lambda x: int(x),
        "MOD": lambda x, y: x % y,
        "ADD": lambda x, y: x + y,
        "SUB": lambda x, y: x - y,
        "MUL": lambda x, y: x * y,
        "DIV": lambda x, y: x / y,
        "FDIV": lambda x, y: x // y,
        "EQ": lambda x, y: str(x) == str(y),
        "NE": lambda x, y: str(x) != str(y),
        "LT": lambda x, y: x < y,
        "LE": lambda x, y: x <= y,
        "GT": lambda x, y: x > y,
        "GE": lambda x, y: x >= y,
        "IN": lambda x, y: x in y,
        "CONTAINS": lambda x, y: y in x,
        "FIRST": lambda x: x[0],
        "LAST": lambda x: x[-1],
        "HEAD": lambda x, y: x[:y],
        "TAIL": lambda x, y: x[-y:],
        "TYPE": lambda x: type(x).__name__,
        "FLAT": lambda x: [i for j in x for i in j],
        "ESC": lambda x: x.replace("\\", "\\\\").replace('"', '\\"'),
        "UNIQ": lambda x: list(set(x)),
        "ZIP": lambda x, y: list(zip(x, y)),
        "SIG": lambda x: f"[[{x}]]",
        "WORD": lambda x, y: x.split()[y],
    }



